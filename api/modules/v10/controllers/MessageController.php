<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/2/22
 * Time: 15:51
 */

namespace api\modules\v10\controllers;

use Yii;
use yii\data\ActiveDataProvider;
use yii\db\Query;
use yii\myhelper\Decode;
use yii\myhelper\Response;
use yii\rest\Controller;

class MessageController extends Controller
{

    public $modelClass = 'api\modules\v7\models\Message';
    public $serializer = [
        'class' =>  'yii\rest\Serializer',
        'collectionEnvelope'    =>  'item',
    ];

    public function behaviors()
    {
        return parent::behaviors(); // TODO: Change the autogenerated stub
    }

    public function actions()
    {
        $actions =  parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['index'],$actions['view'],$actions['create'],$actions['update'],$actions['delete']);
        return $actions;
    }

    public function actionIndex(){

        $uid = isset($_GET['uid'])?$_GET['uid']:'';
        $decode = new Decode();
        if(!$decode->decodeDigit($uid)){
            Response::show(210,'参数不正确');
        }
        if(!$uid){
            Response::show('201','操作失败','参数不全');
        }

        $model = new $this->modelClass;
        $query = $model::find()
            ->join('left join','{{%app_words}} as w','pre_app_message.words_id=w.id')
            ->where(" to_id = {$uid} and from_id <> {$uid} and is_read = 1 ");
        //->orwhere("w.user_id={$uid} and to_id <> {$uid} and from_id <> {$uid} and is_read = 1 ");

        return new ActiveDataProvider([
            'query' => $query,
            'pagination'    =>  [
                'pagesize'  =>  15,
            ],
            'sort'  =>  [
                'defaultOrder'  =>  [
                    'id'    =>  SORT_DESC,
                    'created_at'    =>  SORT_DESC,
                ]
            ],
        ]);

    }

    //标记为已读消息
    public function actionUpdate($id){

        $decode = new Decode();
        if(!$decode->decodeDigit($id)){
            Response::show(210,'参数不正确');
        }
        $message_id = (new Query())
            ->select('m.id')
            ->from('{{%app_message}} as m')
            ->join('left join','{{%app_words}} as w','w.id=m.words_id')
            ->where(['to_id'=>$id,'is_read'=>1])
            //->orwhere(['w.user_id'=>$id,])
            ->all();
        if($message_id){
            $data = array();
            foreach($message_id as $list){
                $data[] = $list['id'];
            }
            $data = implode(',',$data);

            $res1 = Yii::$app->db->createCommand("delete from pre_app_push  where message_id in ({$data})")->execute();
            $res2 = Yii::$app->db->createCommand("update pre_app_message set is_read = 0 where id in ({$data})")->execute();
            if($res1 && $res2){
                Response::show('200','操作成功','标记成功');
            }
            Response::show('201','操作失败','标记失败');
        }
        Response::show('202','操作失败','无需操作的记录');
    }

    //清空历史记录
    public function actionDelete($id){

        $decode = new Decode();
        if(!$decode->decodeDigit($id)){
            Response::show(210,'参数不正确','参数不正确');
        }
        $info = (new Query())->select('id')->from('{{%app_message}}')->where(['to_id'=>$id])->all();
        $wordsArray = array();
        foreach($info as $list){
            $wordsArray[] = $list['id'];
        }

        $res = Yii::$app->db->createCommand("delete from pre_app_message where to_id = {$id}")->execute();
        if($res){

            //删除消息提醒
            if($wordsArray){
                $wordsArray = implode(',',$wordsArray);
            }

            Yii::$app->db->createCommand("delete from pre_app_push where message_id in ({$wordsArray})")->execute();

            Response::show('200','操作成功','消息已清空');
        }
        Response::show('201','操作失败','消息清空失败或没有需要清除的');
    }
}